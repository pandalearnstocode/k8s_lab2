version: '3.8'

services:
  client_service:
    container_name: client_service
    build: ./client_service
    command: streamlit run app/main.py --server.address="0.0.0.0" --server.port="80"
    env_file: 
      - .env
    volumes:
      - ./client_service:/usr/src/app
      - ./config.py:/usr/src/app/app/config.py:ro
    ports:
      - 80:80
  app_service:
    container_name: app_service
    build: ./app_service
    command: uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000
    volumes:
      - ./app_service:/usr/src/app
      - ./config.py:/usr/src/app/app/config.py:ro
    ports:
      - 8004:8000
    env_file: 
      - .env
    depends_on:
      - project_db_service
  project_db_service:
    container_name: project_db_service
    build: ./project_db
    environment:
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=project_db
  datalake_db_service:
    build: ./datalake_db
    container_name: datalake_db_service
    environment:
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=datalake_db
  data_service:
    build: ./data_service
    container_name: data_service
    command: uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000
    volumes:
      - ./data_service:/usr/src/app
      - ./config.py:/usr/src/app/app/config.py:ro
    ports:
      - 8003:8000
    env_file: 
      - .env
    depends_on:
      - datalake_db_service
  prometheus_service:
    build: ./prometheus
    restart: unless-stopped
    container_name: prometheus_service
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - app_service
  grafana_service:
    build: ./grafana
    restart: unless-stopped
    user: "472"
    container_name: grafana_service
    depends_on:
      - prometheus_service
    ports:
      - 3000:3000
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml
    env_file: 
      - .env
  redis_service:
    build: ./redis
    container_name: redis_service
    ports:
      - "6379:6379"
    env_file: 
      - .env
  rabbitmq_service:
    build: ./rabbitmq
    hostname: rabbitmq_service
    container_name: rabbitmq_service
    image: rabbitmq:latest
    volumes:
        - "./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
    ports:
        - "5672:5672"
    env_file: 
      - .env
  ml_service:
    build: ./ml_service
    container_name: ml_service
    command: gunicorn --bind 0.0.0.0:8000 app.main:app -w 1 -k uvicorn.workers.UvicornWorker --access-logfile - --error-logfile - --log-level info
    volumes:
      - ./ml_service:/usr/src/app
      - ./config.py:/usr/src/app/app/config.py:ro
    ports:
      - 8002:8000
    env_file: 
      - .env
  celery_service:
    build: ./celery
    container_name: celery_service
    command: celery worker -A app.tasks --loglevel=info
    volumes:
      - ./ml_service/app:/usr/src/app/app
      - ./config.py:/usr/src/app/app/config.py:ro
    env_file: 
      - .env
    depends_on:
      - rabbitmq_service
      - redis_service
  flower_service:
    build: ./flower
    container_name: flower_service
    command: celery flower -A app.tasks --broker=amqp://guest:guest@rabbitmq_service:5672//
    volumes:
      - ./ml_service/app:/usr/src/app/app
      - ./config.py:/usr/src/app/app/config.py:ro
    env_file: 
      - .env
    depends_on:
      - rabbitmq_service
      - redis_service
    ports:
      - 5555:5555
  logger_service:
    build: ./dozzle_logger
    container_name: logger_service
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    env_file: 
      - .env